<template>
    <div :class='state'>
        <div class='tmpl-task'>
            <h3>{{task.taskname}}</h3>
                <div v-if='info'>
                    <p><Icon type="clock">start</Icon>  {{ duration  }}</p>
                    <p><Icon type="stats-bars"></Icon> {{ info.task_status }}</p>
                    <p v-if='info.version'><Icon type="ios-calendar"></Icon> {{ info.version}}</p>
                    <p v-for='artifact in info.artifacts' v-if='state !=="FAILURE"'>
                        <Icon type="locked"></Icon> <a :href='info.url +"artifact/"+ artifact.relativePath'> {{ artifact.fileName }}</a>
                    </p>
                </div>
                <div v-if='!info'>
                   <i-button type="success" shape="circle" @click='build(item._id, task._id, configid)'> 执行 </i-button>
               </div>
        </div>
        <Modal 
            v-if="task.name === 'FECodeRelease'"
            v-model="version"
            title="正在发布版本" >
            <p>版本号：{{version}}</p>
        </Modal>
    </div>
</template>
<style lang='less'>
    .autoflex .flex.progressing{
       border-image: url('./progress-bar.gif') 2 2 round; 
        &:hover{
            &:before {
                background: #f90;
            }
        }
        &:before {
            background: #ffb103;
        }
    }
    .autoflex .flex.unstart{
        border-bottom-color:#ccc;
        &:hover{
            border-bottom: 3px solid #999;
            &:before {
                background: #999;
            }
        }
        &:before {
            background: #ccc;
        }
    }
    .autoflex .flex.error,
    .autoflex .flex.FAILURE{
        border-bottom-color:#bd4747;
        &:hover{
            border-bottom: 3px solid #f00;
            &:before {
                background: #f00;
            }
        }
        &:before {
            background: #bd4747;
        }
    }
    .autoflex .flex.SUCCESS{
        border-bottom: 3px solid #7ab439;
        &:hover{
            &:before {
                background: #7ab439;
            }
        }
        &:before {
            background: #7ab439;
        }
    }

</style>
<script type='text/javascript'>
    import axios  from '../static/lib/ajax/axios.js';
    let moment = require('agile:static/lib/moment/moment.min.js');
    export default{
        data(){
            return {
                task: {},
                item: {},
                configid: '',
                info: false,
                state: '',
                version: false
            }
        },
        props: ['task', 'item', 'configid'],
        watch:{ },
        created(){
            // this.item.builds 按时间倒序排列
            this.info = this.item.builds.filter((item, index) => {
                return this.task._id === item.task_id; 
            }).pop();
            this.state = this.info &&  this.info.task_status || '' ;
        },
        methods:{ 
            build(...arg){
                if(this.task.name === 'FECodeRelease'){
                    this.codeRelease.apply(this, arg);
                }else{
                    this.codeBuild.apply(this, arg);
                }
            },
            codeBuild(push_id, task_id, config_id){
                let {branch, path } = this.$route.params;
                axios.post('agile/build',{
                    config_id,
                    push_id,
                    task_id,
                    repository: this.item.project.git_http_url,
                    branch: branch,
                }).then((response)=>{
                    this.info  = {
                       task_status : 'progressing',
                       start_time:  new Date(),
                       end_time: ''
                    };
                    this.state = this.info.task_status;
                });
            
            },
            codeRelease(push_id, task_id, config_id){
                this.codeBuild.call(this, push_id, task_id, config_id);
            }
        },
        computed:{
            duration(){
                let end_time;
                if( !this.info.end_time){
                    end_time = (new Date()).valueOf()
                }else{
                    end_time = (new Date(this.info.end_time)).valueOf()
                }
                let dur = end_time - (new Date(this.info.start_time) ).valueOf();
                return parseInt(dur/1000) + 's'
            }
        },
        components: { }
    }
</script>
