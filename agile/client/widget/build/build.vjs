<template>
    <div class='tmpl-build'>
        build
        {{branch}}
        {{path}}
        <div class='tasklist'>
        <h2> 任务列表 </h2>
            <div class='buildlist' v-for='(item, index) in list'>
               <div class='autoflex'>
                <div class='flex'>
                    <h3>基础信息</h3>
                    <Row class='userinfo'>
                        <i-col span='12'>
                            <Icon type="fork-repo"></Icon> {{item.checkout_sha.replace(/^(.{8}).*$/,'$1')}}
                        </i-col>
                        <i-col span='12'>
                            <Icon type="ios-speedometer-outline"></Icon> {{  createTime(item.create_time) }}
                        </i-col>
                    </Row>
                    <Row class='userinfo'>
                        <i-col span='12'>
                            <Icon type="code-working"></Icon> {{item.user_email}}
                        </i-col>
                        <i-col span='12'>
                            <Icon type="ios-chatboxes-outline"></Icon> {{ item.message || item.commits[0]  &&  item.commits[0]['message'] || ''}}
                        </i-col>
                    </Row>
                </div>
                <template v-for='(task, index) in tasklist'>
                    <task-build class='flex' :task='task' :item='item' :configid='configid' />
                </template>
               </div>
            </div>
        </div>
    </div>
</template>
<style lang='less'>
.tmpl-build{
    display: block;
    padding: 10px;
    h2{
        margin: 24px 0;
    }
    .userinfo .ivu-col-span-12{
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap !important;
    }
    .tasklist{
        line-height: 40px;
        .title{
            font-weight: 800;
        }
    }
}
.autoflex{
    display: flex;
    .flex{
        border-bottom: 3px solid #C6EC9B;
        flex: 1; 
        position: relative;
        &:hover{
            border-bottom: 3px solid #7ab439
        }
        &:before{
            content: '';
            background: #95bb6b;
            width: 8px;
            height: 8px;
            border-radius: 8px;
            display: block;
            position: absolute;
            left: -2px;
            bottom: -5px;
        }
    }
}
</style>
<script type='text/javascript'>
    import axios  from '../static/lib/ajax/axios.js';
    let moment = require('agile:static/lib/moment/moment.min.js');
    import taskBuild  from './task.vjs';
    export default{
        data(){
            return {
                branch: '',
                path: '',
                list:[],
                tasks: [],
                configid: '',
            }
        },
        props: [],
        created(){
            this.changepath();
        },
        watch:{
            '$route'(npath, opath){
                this.changepath();
            }
        },
        methods:{
            changepath(){
                let {branch, path } = this.$route.params;
                this.branch = branch ;
                this.path = path ;

                let Agile = JSON.parse(window.localStorage.getItem('Agile'));
                Agile.build.path =  this.$route.fullPath;
                window.localStorage.setItem('Agile', JSON.stringify(Agile));

                // 配置 config
                axios.get(['/agile/config/', path].join("")).then( (response) => {
                    let { repertory, tasks, _id }= response.data.data[0];
                    this.tasklist = tasks;
                    this.configid = _id;
                    // hook list
                    axios.get(['/agile/hook/', repertory.id].join(""), { params: {
                        ref: branch+'$'
                    }}).then( (response) => {
                        this.list = response.data.data.map(function(item){
                            item.buildGroup = {};
                            item.builds.forEach(function(task, index){
                                if(item.buildGroup[task.task_id]){
                                    item.buildGroup[task.task_id].push(task)
                                }else{
                                    item.buildGroup[task.task_id] = [task]
                                }
                            });
                            return item; 
                        });
                    });
                });

            },
            createTime(time){
                let t = (new Date()).valueOf() - (new Date(time)).valueOf();
                if(t > 1000 * 60 * 60 *24){
                    return  moment(time).format('MM-DD H:mm:ss');
                }else{
                    return  moment(time).format('H:mm:ss');
                }
            }
        },
        components: { 
            taskBuild
        },
    }
</script>
